/*
 * OIDC ICT Userinfo Endpoint
 *
 * Endpoint for OpenID Connect's ID Certifcation Token endpoint for userinfo.
 *
 * API version: 0.4.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"ict/env"
	"ict/ict"
	"ict/logs"

	"github.com/go-chi/docgen"
	log "github.com/sirupsen/logrus"
)

func main() {
	logs.SetLogLevel()

	err := run()
	if err != nil {
		log.Fatal(err)
	}
}

func run() error {
	var (
		routesEnv string = env.Get("ROUTES", "")
		portEnv   string = env.Get("PORT", "80")
	)
	log.Info("Loading configuration...")
	ict.Initialize()

	chiRouter := ict.NewRouter()
	// Generate documentation for router if ROUTES Env is set
	if len(routesEnv) != 0 {
		fmt.Println(docgen.MarkdownRoutesDoc(chiRouter, docgen.MarkdownOpts{
			ProjectPath: "github.com/elarodas/thesisproject/ict",
			Intro:       "generated REST docs for ict",
		}))
		return nil
	}

	errCh := make(chan error, 1)

	go func() {
		log.Info(fmt.Sprintf("API Server started on Port %s", portEnv))
		errCh <- http.ListenAndServe(fmt.Sprintf(":%s", portEnv), chiRouter)
	}()

	osSigCh := make(chan os.Signal, 1)
	signal.Notify(osSigCh, os.Interrupt, syscall.SIGTERM)

	select {
	case err := <-errCh:
		log.Error("failed to serve: %v", err)
		return err
	case sig := <-osSigCh:
		log.Info("terminating: %v", sig)
		return nil
	}
}
